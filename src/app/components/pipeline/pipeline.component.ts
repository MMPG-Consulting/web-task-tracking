import { Component, OnInit } from '@angular/core';
import { AngularFirestore } from '@angular/fire/firestore';
import { AngularFireAuth } from '@angular/fire/auth';
import { FormControl, Validators } from '@angular/forms';
import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';
import * as _ from 'lodash';

@Component({
  selector: 'app-pipeline',
  templateUrl: './pipeline.component.html',
  styleUrls: ['./pipeline.component.scss']
})
export class PipelineComponent implements OnInit {

  // User Document object extracted from firebase
  // container all the information related to the user
  public userDocument: any;

  // the unique id generated by firebase auth
  public uid: string;

  // the column id being changed at the moment of a change
  public id: number;

  // card selected for changes
  public selectedCard = {
    columnId: undefined,
    cardId: undefined,
    card: undefined
  };

  // Column name form validatore, is required
  public name = new FormControl('', [Validators.required]);

  // booleans to triggers pop ups
  public changeName = false;
  public triggerAddCard: boolean;

  // container height that will be used in the DOM to
  // set the pipeline container height
  public containerHeight: number;

  // Array of idsin order to seamless drag and drop
  // elements in between card lists
  public connectedTo: string[] = [];

  constructor(
    private fireStore: AngularFirestore,
    private fireAuth: AngularFireAuth
  ) {
    // calculate the height of the container
    this.getHeightofContainer();
  }

  // trigger the new card popup
  public newCard(id: number) {
    this.id = id;
    this.triggerAddCard = true;
  }

  // gets the firebase user object
  // takes the uid as an input and assigns
  // the user to the userDocument variable
  private userPipeline(uid: string) {
    this.fireStore.collection('users').doc(uid)
    .snapshotChanges().subscribe(result => {
      this.userDocument = result.payload.data();
      this.buildConnectedTo();
    });
  }

  // triggers the pop up for data entry
  // takes the column id as an argument and
  // the type of changes needed
  public triggerPopUp(id: number, type: string) {
    if (type === 'name') {
      this.id = id;
      this.name.reset(this.userDocument.columns[id].name);
      this.changeName = true;
    }
  }

  // confirm changes made to the value specified
  // in the pop up
  public confirmChange() {
    if (this.name.value !== '' && this.name.valid) {
      this.userDocument.columns[this.id].name = this.name.value;
      this.id = undefined;
      this.name.reset('');
      this.changeName = false;
    }
    this.updateUser();
  }

  // Event that triggers when dropping the column into its newer place
  // this moves the selected column into its new position (index)
  public drop(event: CdkDragDrop<{name: string}[]>) {
    moveItemInArray(this.userDocument.columns, event.previousIndex, event.currentIndex);
  }

  // event that riggers when moving cards between lists
  public dropCard(event: CdkDragDrop<string[]>) {
    if (event.container.data === undefined) {
      this.transferArrayItemIntoEmptyArray(event);
    } else {
      if (event.previousContainer === event.container) {
        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);
      } else {
        transferArrayItem(event.previousContainer.data,
                          event.container.data,
                          event.previousIndex,
                          event.currentIndex);
      }
    }
    this.updateUser();
  }

  private transferArrayItemIntoEmptyArray(event: CdkDragDrop<string[]>) {

    // prepare various helpful data
    const columnId = event.previousContainer.id.substr(10);
    const newColumnId = event.container.id.substr(10);
    const data = _.cloneDeep(event.previousContainer.data[event.previousIndex]);

    // splice the data point on the specific column
    this.userDocument.columns[columnId].cards.splice(event.previousIndex, 1);

    // add the data to the relevant column
    this.userDocument.columns[newColumnId].cards ?
    this.userDocument.columns[newColumnId].cards.push(data) :
    this.userDocument.columns[newColumnId].cards = [data];
  }

  // build connected to array for id drag
  private buildConnectedTo() {
    let counter = 0;
    this.userDocument.columns.forEach(() => {
      this.connectedTo.push('card-list-' + counter)
      counter ++;
    });
  }

  // Deletes a column
  // takes the column index as an argument
  public deleteElement(id: number) {
    this.userDocument.columns.splice(id, 1);
    this.updateUser();
  }

  // Updates the User Document extracted from fireabse
  // with its equivalent object present here in the client
  private updateUser() {
    this.fireStore.collection('users').doc(this.uid).update(this.userDocument);
  }

  // Promise that gets the user uid
  // and returns it as a string
  private getUid(): Promise<string> {
    return Promise.resolve(new Promise<string>(resolve => {
      this.fireAuth.authState.subscribe(r => {
        resolve(r.uid);
      });
    }));
  }

  // adds a new column into the userDocument object
  public addColumn() {
    if (this.userDocument) {
      if (this.userDocument.columns) {
        this.userDocument.columns.push({name: 'new column'});
      } else {
        this.userDocument.columns = [{name: 'new column'}];
      }
    } else {
      this.userDocument = {
        columns: [{
          name: 'new column',
          cards: []
        }]
      };
    }

    this.fireStore.collection('users').doc(this.uid).set(this.userDocument);
  }

  // Get's height of page to make sure the container is
  // this exact same height. Sub-containers will be
  // overflowed to allow for long columns and wide column stacks
  private getHeightofContainer() {
    let height = window.innerHeight;
    height -= 64;
    this.containerHeight = height;
  }

  // add a new card to a specified column
  // the event contains the card info object
  public addCard(event: any) {

    // rgister the new card if event has an object
    if (event) {
      this.userDocument.columns[this.id].cards ?
      this.userDocument.columns[this.id].cards.push(event) :
      this.userDocument.columns[this.id].cards = [event];
      this.updateUser();
    }

    this.triggerAddCard = false;
    this.id = undefined;
  }

  // trigger the card modifier
  public triggerCardModifyer(columnId: number, cardId: number, card: any) {
    const cardCopy = _.cloneDeep(card);
    this.selectedCard = {
      card: cardCopy,
      columnId,
      cardId
    };
  }

  // get the number of card in a column
  public getNumberCard(column: any): number {
    return column.cards ? column.cards.length : 0;
  }

  // get the amount in currency of the column
  public getAmount(column: any): number {
    return column.cards ? this.amount(column.cards) : 0;
  }

  private amount(cards: any[]): number {
    let amount = 0;
    let counter = 0;
    cards.forEach(card => {
      amount += card.value;
      counter ++;
      if (cards.length === counter) {
        return amount;
      }
    });
    return amount;
  }

  // confirm the changes to the card
  public updateCard(event: any) {
    if (event) {
      this.userDocument.columns[event.columnId].cards[event.cardId] = event.card;
      this.updateUser();
    }
    this.selectedCard = {
      card: undefined,
      cardId: undefined,
      columnId: undefined
    }
  }

  async ngOnInit() {
    // get the uid
    this.uid = await this.getUid();
    // get the user document
    this.userPipeline(this.uid);
  }

}

